const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};
const generationConfig2 = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for Python for exam and level of difficulty will be EASY with summary of courseList of Chapters along with summary for each chapter, Topic list in each chapter, All result in json format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "courseName": "Introduction to Python Programming (Easy Level)",\n  "courseDescription": "This course provides a beginner-friendly introduction to Python programming. It covers fundamental concepts and prepares students for basic programming tasks.",\n   "level": "Easy",\n  "courseList": [\n     {\n       "chapterNumber": 1,\n       "chapterName": "Introduction to Python",\n       "summary": "This chapter introduces the basic concept of python and some practical application of Python. It will also guide to installation and running first python program.",\n       "topics": [\n          "What is Python?",\n          "Why learn Python?",\n          "Applications of Python",\n          "Setting up the Python environment",\n          "Running your first Python program"\n       ]\n    },\n    {\n      "chapterNumber": 2,\n      "chapterName": "Basic Syntax and Variables",\n      "summary": "This chapter dives into the basic syntax of Python, focusing on variables and data types. It teaches how to store and manipulate data using different types.",\n      "topics": [\n        "Comments in Python",\n        "Variables: naming and assignment",\n        "Data types: integers, floats, strings",\n        "Type conversion",\n        "Basic input and output using `print()` and `input()`"\n      ]\n    },\n    {\n      "chapterNumber": 3,\n      "chapterName": "Operators in Python",\n      "summary": "This chapter deals with various operators in python that performs different operations.It cover arithmetic, logical, and comparison operations in Python.",\n      "topics": [\n          "Arithmetic operators: +, -, *, /, %, //, **",\n          "Comparison operators: ==, !=, >, <, >=, <=",\n          "Logical operators: and, or, not",\n          "Operator precedence",\n           "Assignment Operators"\n        ]\n    },\n    {\n      "chapterNumber": 4,\n      "chapterName": "Control Flow: Conditional Statements",\n       "summary": "This chapter introduces conditional statements. Learner will be able to make decision on the basis of the result of comparison operators.",\n       "topics": [\n         "The `if` statement",\n         "The `if-else` statement",\n         "The `if-elif-else` statement",\n         "Nested `if` statements"\n      ]\n    },\n    {\n      "chapterNumber": 5,\n      "chapterName": "Control Flow: Loops",\n       "summary": "This chapter introduces loop concept. Learner will be able to make execute statements multiple times until condition not meets.",\n       "topics": [\n           "The `for` loop",\n           "Iterating over sequences (lists, strings)",\n           "The `while` loop",\n            "Break and Continue statements"\n        ]\n    },\n    {\n        "chapterNumber": 6,\n        "chapterName":"Basic Data Structures: Lists",\n         "summary": "This chapter introduces the concept of list, and how to perform different operations on list",\n        "topics":[\n            "Introduction to Lists",\n            "Creating Lists",\n            "Accessing List Elements",\n            "List slicing",\n            "List methods (append, insert, remove, pop)",\n            "List Length"\n        ]\n    },\n    {\n        "chapterNumber": 7,\n        "chapterName": "Introduction to Functions",\n        "summary": "This chapter introduces the concept of functions in python and use of arguments. Also covers calling a function.",\n        "topics":[\n            "What is a function?",\n            "Defining functions",\n            "Calling functions",\n            "Function arguments",\n            "Return values"\n        ]\n    }\n\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});

//const result = await courseOutlineAIModel.sendMessage("INSERT_INPUT_HERE");
//console.log(result.response.text());

export const generateNotesAiModel = model.startChat({
  generationConfig2,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate exam material detail content for each chapter. Make sure to include all topic point in the content,make sure to dive content in html format(Do not Add HTML,HEAD,BODY,TITLE tag) and style with it tailwind css to make it more attractive and don\'t use class use className for styling use tailwind with colors,borders style and gap between div, please include headings with colors and in big size in tailwind css and content in border with light gray color , and give result in html format only not json and you are including \n instead you use <br> and don\'t include \n , The chapters: {     "chapterNumber": 1,     "chapterName": "Introduction to Data Structures and Algorithms",      "summary": "This chapter introduces the basic concepts of data structures and algorithms. It will also cover some common terminology and the importance of efficient data management.",      "topics": [        "What are Data Structures?",        "What are Algorithms?",        "Why are Data Structures and Algorithms Important?",       "Basic Terminology (e.g., time complexity, space complexity)",       "Types of Data Structures",       "Types of Algorithms"     ]    },    {      "chapterNumber": 2,    "chapterName": "Arrays",     "summary": "This chapter focuses on the array data structure. It covers how arrays are created and how operations are performed such as accessing, insertion, and deletion.",      "topics": [       "What are Arrays?",        "Array Indexing",       "Array Initialization",       "Array Operations: Insertion, Deletion, Accessing",        "Linear Search",      "Time and Space Complexity of Arrays"     ]    },   {     "chapterNumber": 3,     "chapterName": "Linked Lists",      "summary": "This chapter covers the linked list data structure, including its types and operations. It will also highlight the comparison with Arrays.",     "topics": [        "What are Linked Lists?",       "Singly Linked Lists",       "Doubly Linked Lists",       "Linked List Operations: Insertion, Deletion, Traversal",        "Comparison with Arrays",       "Time and Space Complexity of Linked List"      ]    },    {      "chapterNumber": 4,      "chapterName": "Stacks",      "summary": "This chapter deals with the stack data structure and its fundamental operations using LIFO concept.",      "topics": [       "What are Stacks?",      "LIFO (Last-In, First-Out) Principle",        "Stack Operations: Push, Pop, Peek",     "Implementation of Stacks using Array",        "Implementation of Stacks using Linked List",        "Basic Applications of Stacks"      ]   },    {     "chapterNumber": 5,      "chapterName": "Queues",     "summary": "This chapter deals with queue data structure, how it works, and different operations on it with FIFO concept.",      "topics": [        "What are Queues?",        "FIFO (First-In, First-Out) Principle",        "Queue Operations: Enqueue, Dequeue, Peek",        "Implementation of Queues using Array",        "Implementation of Queues using Linked List",        "Basic Applications of Queues"      ]    },    {      "chapterNumber": 6,      "chapterName": "Basic Sorting Algorithms",      "summary": "This chapter covers basic sorting algorithms that are frequently used.",      "topics": [       "What is Sorting?",        "Bubble Sort",        "Insertion Sort",       "Selection Sort",        "Time and Space Complexity of Basic Sorting Algorithms"     ]    },    {      "chapterNumber": 7,      "chapterName": "Basic Searching Algorithms",      "summary": "This chapter introduces the concept of searching using linear search and binary search techniques.",      "topics": [       "What is Searching?",       "Linear Search",        "Binary Search",        "Time and Space Complexity of Search Algorithms"      ]  }',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html<div className="container mx-auto p-4">    <div className="mb-8">        <h2 className="text-2xl font-bold mb-4">Chapter 1: Introduction to Data Structures and Algorithms</h2>        <p className="mb-4 text-gray-700">            This chapter introduces the basic concepts of data structures and algorithms. It will also cover some common terminology and the importance of efficient data management.       </p>       <ul className="list-disc pl-5 text-gray-800">           <li className="mb-2">                <span className="font-semibold">What are Data Structures?</span>               <p className="ml-4">                    Definition of data structures, why we need them, and how they help organize and manage data efficiently.                   Examples of different data structures like arrays, linked lists, stacks, queues, trees, and graphs.               </p>            </li>            <li className="mb-2">               <span className="font-semibold">What are Algorithms?</span>              <p className="ml-4">                    Definition of algorithms, the purpose of using algorithms to solve computational problems. A step-by-step guide on how to design an algorithm and examples of different algorithmic approaches.                </p>            </li>            <li className="mb-2">                <span className="font-semibold">Why are Data Structures and Algorithms Important?</span>               <p className="ml-4">                    Explanation on the significance of data structures and algorithms in computer science. Impact of                    efficient data structures and algorithms on program performance and speed, and scalability.                </p>            </li>            <li className="mb-2">              <span className="font-semibold">Basic Terminology (e.g., time complexity, space complexity)</span>                <p className="ml-4">                   Definitions and explanations of important terms like time complexity, space complexity, best-case,                    worst-case, and average-case scenarios. Introduction to Big O notation for expressing time and space  complexity.               </p>            </li>          <li className="mb-2">               <span className="font-semibold">Types of Data Structures</span>              <p className="ml-4">                   Categorization of data structures into linear and non-linear types. Discussion on common types such as arrays, linked lists, stacks, queues, trees, and graphs.                </p>            </li>          <li className="mb-2">                <span className="font-semibold">Types of Algorithms</span>                <p className="ml-4">                  Broad categorization of algorithms into different types such as sorting, searching, dynamic programming, and greedy algorithms. Introduction to the basic techniques for algorithm design such as divide and conquer and recursion.                </p>           </li>        </ul>    </div>    <div className="mb-8">        <h2 className="text-2xl font-bold mb-4">Chapter 2: Arrays</h2>        <p className="mb-4 text-gray-700">            This chapter focuses on the array data structure. It covers how arrays are created and how operations are            performed such as accessing, insertion, and deletion.        </p>        <ul className="list-disc pl-5 text-gray-800">          <li className="mb-2">               <span className="font-semibold">What are Arrays?</span>                <p className="ml-4">                    Definition of an array, characteristics of an array, how to store and retrieve a sequence of elements. Differences between arrays and other data structures.               </p>            </li>           <li className="mb-2">                <span className="font-semibold">Array Indexing</span>               <p className="ml-4">                    Explanation of how to access elements in an array using their indices. Indexing starting from zero and how indices relate to memory locations.                </p>            </li>            <li className="mb-2">                <span className="font-semibold">Array Initialization</span>                <p className="ml-4">                   Different ways to initialize an array, either at compile-time or run-time. Examples of initializing arrays with predefined values or user inputs.               </p>          </li>            <li className="mb-2">               <span className="font-semibold">Array Operations: Insertion, Deletion, Accessing</span>                <p className="ml-4">                  Description of fundamental array operations, including insertion of elements at various positions, deletion of elements, and accessing elements by their indices.                </p>            </li>            <li className="mb-2">                <span className="font-semibold">Linear Search</span>                <p className="ml-4">                   Explanation and implementation of the linear search algorithm on an array, and how to iterate through an array to find a target value.                </p>            </li>            <li className="mb-2">                 <span className="font-semibold">Time and Space Complexity of Arrays</span>                <p className="ml-4">                    Analysis of time complexities for various array operations (insertion, deletion, access, search), and space complexity of storing arrays in memory.                </p>            </li>       </ul>    </div>    <div className="mb-8">        <h2 className="text-2xl font-bold mb-4">Chapter 3: Linked Lists</h2>        <p className="mb-4 text-gray-700">            This chapter covers the linked list data structure, including its types and operations. It will also            highlight the comparison with Arrays.        </p>        <ul className="list-disc pl-5 text-gray-800">            <li className="mb-2">                <span className="font-semibold">What are Linked Lists?</span>                <p className="ml-4">                    Definition of a linked list, how it uses nodes to store data and pointers to link nodes together. Basic structure of a node in a linked list, comparison to arrays.                </p>            </li>           <li className="mb-2">                <span className="font-semibold">Singly Linked Lists</span>                <p className="ml-4">                   Explanation of how to implement a singly linked list, traversal and operations on single linked lists.                </p>            </li>            <li className="mb-2">               <span className="font-semibold">Doubly Linked Lists</span>                 <p className="ml-4">                    Explanation of how to implement a doubly linked list, comparison to singly linked lists and advantages, and operations on doubly linked lists.                </p>           </li>           <li className="mb-2">                <span className="font-semibold">Linked List Operations: Insertion, Deletion, Traversal</span>                <p className="ml-4">                    Different types of insertion (at start, at end, in the middle) and deletion (from start, from end, from specific position) in linked lists. Traversal process for each type of linked list.                </p>            </li>            <li className="mb-2">                <span className="font-semibold">Comparison with Arrays</span>                <p className="ml-4">                    A comparison between arrays and linked lists, advantages and disadvantages of both structures, when to prefer linked lists vs arrays.                </p>            </li>            <li className="mb-2">                <span className="font-semibold">Time and Space Complexity of Linked List</span>               <p className="ml-4">                    Analysis of time complexities for linked list operations and space complexity. How complexity differs between singly and doubly linked list implementations.                </p>           </li>        </ul>    </div>        <div className="mb-8">        <h2 className="text-2xl font-bold mb-4">Chapter 4: Stacks</h2>        <p className="mb-4 text-gray-700">            This chapter deals with the stack data structure and its fundamental operations using LIFO concept.        </p>        <ul className="list-disc pl-5 text-gray-800">            <li className="mb-2">                <span className="font-semibold">What are Stacks?</span>               <p className="ml-4">                   Definition of a stack and how it works, how a stack helps to structure data in a specific manner.                </p>            </li>            <li className="mb-2">            <span className="font-semibold">LIFO (Last-In, First-Out) Principle</span>               <p className="ml-4">                   Explanation of the LIFO principle, how items are pushed and popped in a stack, real world scenarios where the LIFO principle is used.                </p>            </li>            <li className="mb-2">               <span className="font-semibold">Stack Operations: Push, Pop, Peek</span>               <p className="ml-4">                   Explanation and demonstration of the three basic stack operations: push (adding an element), pop (removing an element), and peek (viewing the top element).                </p>            </li>            <li className="mb-2">                <span className="font-semibold">Implementation of Stacks using Array</span>                <p className="ml-4">                   How to implement a stack using an array. How to ensure correct stack operation, handling overflow and underflow.                </p>            </li>             <li className="mb-2">                <span className="font-semibold">Implementation of Stacks using Linked List</span>              <p className="ml-4">                   How to implement a stack using a linked list. How stack operations can be implemented using linked list.                </p>            </li>            <li className="mb-2">                <span className="font-semibold">Basic Applications of Stacks</span>                <p className="ml-4">                    Examples of how stacks are used in computer programs. How stacks are used for function calls and expressions.                </p>           </li>        </ul>    </div></div>```',
        },
      ],
    },
  ],
});

export const generateStudyTypeContentAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate the flashcard on topic : Flutter Fundamentals ,user Interface (UI) development , Basic App navigation in json format with front and back content, Maximum 15"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the fundamental building block of a Flutter app's UI. Everything you see on the screen is a widget or a composition of widgets. Examples include Text, Image, Button, Container, etc.\"\n  },\n  {\n    \"front\": \"Name three core types of widgets in Flutter?\",\n    \"back\": \"1. **StatelessWidget**: Immutable widgets that don't change after being built.\\n2. **StatefulWidget**: Widgets that maintain state and can rebuild their UI when that state changes.\\n3. **InheritedWidget**: A widget that efficiently propagates data down the widget tree.\"\n  },\n    {\n    \"front\": \"What is the purpose of `build()` method in a widget?\",\n    \"back\": \"The `build()` method is responsible for constructing the widget's UI by returning the widget tree that represents its visual appearance. It gets called whenever the widget needs to be rebuilt.\"\n  },\n  {\n     \"front\":\"What is a Container Widget in Flutter?\",\n     \"back\":\"A Container widget is a generic layout widget. It combines common painting, positioning, and sizing widgets, to control the appearance and layout of a child widget.\"\n  },\n  {\n    \"front\": \"How do you handle user interaction with buttons?\",\n    \"back\": \"Use `ElevatedButton`, `TextButton`, or `OutlinedButton` widgets. Provide an `onPressed` callback function to define the action when the button is tapped.\"\n  },\n    {\n    \"front\": \"How do you display an image from assets in Flutter?\",\n    \"back\":\"Use the `Image.asset('path/to/your/image.png')` widget. Make sure the image path is correctly configured in the `pubspec.yaml` file under the `assets` section.\"\n  },\n  {\n    \"front\": \"What is the purpose of the `MaterialApp` widget?\",\n    \"back\": \"The `MaterialApp` widget is the root widget for apps using Material Design. It configures the app's theme, navigation, and more. It's usually the top-level widget in a Flutter app.\"\n  },\n  {\n    \"front\": \"How do you navigate between screens in Flutter?\",\n    \"back\": \"Use the `Navigator` widget. You can push a new route (screen) using `Navigator.push()`, and pop back to the previous screen using `Navigator.pop()`. Routes are managed by a `MaterialApp` or equivalent routing.\"\n  },\n    {\n     \"front\":\"What is a `Scaffold` widget?\",\n     \"back\":\"A `Scaffold` widget provides the basic visual structure of a Material Design screen, such as an `AppBar`, `Drawer`, and a `body` area.\"\n   },\n    {\n    \"front\": \"What is the difference between `push` and `pushReplacementNamed` navigation?\",\n    \"back\": \"`push` adds a new route on top of the current navigation stack, whereas `pushReplacementNamed` replaces the current route with the new route in the stack. The latter removes the possibility of going back to the previous route.\"\n  },\n {\n    \"front\": \"How to pass data to a new screen during navigation?\",\n    \"back\": \"You can pass data as arguments when using `Navigator.push` by providing it as a second argument. The receiving screen can access this data through `ModalRoute.of(context).settings.arguments`.\"\n  },\n    {\n    \"front\": \"What is `pubspec.yaml` file used for?\",\n    \"back\": \"The `pubspec.yaml` file is where you declare dependencies (libraries, packages, assets) for your Flutter project. It also provides information about the app (name, version etc.).\"\n  },\n    {\n     \"front\": \"What is Hot Reload?\",\n     \"back\": \"Hot Reload is a feature that allows you to make changes to your code and see them reflected in your running app almost instantaneously, without losing the app's state.\"\n    },\n    {\n      \"front\": \"How to make a row of widgets horizontally in Flutter?\",\n      \"back\":\"Use the `Row` widget and provide the widgets you want to display as its children. The widgets will be arranged horizontally side-by-side\"\n    },\n     {\n      \"front\":\"How to make a column of widgets vertically in Flutter?\",\n      \"back\":\"Use the `Column` widget and provide the widgets you want to display as its children. The widgets will be arranged vertically one below the other\"\n    }\n]\n```\n"},
      ],
    },
  ],
});


